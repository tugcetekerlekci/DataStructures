/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
*/

public class Solution {
    public int Search(int[] nums, int target) {
        if (nums.Count()==0) {return -1; }
        var breakIndex = -1;
        for(int i=0;i<nums.Count()-1;i++)
        {
            if (nums[i+1]<nums[i])
            {
                breakIndex = i+1;
            }
        }
		var firstArray = new List<int>();
		var secondArray = new List<int>();
        if (breakIndex == -1 )
        {
            return SearchInOrderedArray(nums,target);
        }
        else
        {    
            firstArray = nums.ToList().GetRange(0,breakIndex);
            secondArray = nums.ToList().GetRange(breakIndex,nums.Count()-breakIndex);
        
		    if (target<=secondArray[secondArray.Count()-1] && target>=secondArray[0])
            {
                var result = SearchInOrderedArray(secondArray.ToArray(),target);
                return result == -1 ? -1 : 
                    SearchInOrderedArray(secondArray.ToArray(),target)+firstArray.Count();
            }

            else if (target<=firstArray[firstArray.Count()-1] && target>=firstArray[0])
            {
                Console.WriteLine(firstArray.ToArray());
                return SearchInOrderedArray(firstArray.ToArray(),target);
            }
			return -1;
 
        }
    }
    public int SearchInOrderedArray(int [] nums,int target)
    {
        if(nums == null || nums.Count() == 0)
            return -1;
        int left = 0, right = nums.Count() - 1;
        while(left <= right)
        {
            int mid = left + (right - left) / 2;
            if(nums[mid] == target){ return mid; }
            else if(nums[mid] < target) { left = mid + 1; }
            else { right = mid - 1; }
        }
        return -1;
    }
}
